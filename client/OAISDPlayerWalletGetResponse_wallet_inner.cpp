/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDPlayerWalletGetResponse_wallet_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDPlayerWalletGetResponse_wallet_inner::OAISDPlayerWalletGetResponse_wallet_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDPlayerWalletGetResponse_wallet_inner::OAISDPlayerWalletGetResponse_wallet_inner() {
    this->initializeModel();
}

OAISDPlayerWalletGetResponse_wallet_inner::~OAISDPlayerWalletGetResponse_wallet_inner() {}

void OAISDPlayerWalletGetResponse_wallet_inner::initializeModel() {

    m_blockchain_isSet = false;
    m_blockchain_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_monies_isSet = false;
    m_monies_isValid = false;
}

void OAISDPlayerWalletGetResponse_wallet_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDPlayerWalletGetResponse_wallet_inner::fromJsonObject(QJsonObject json) {

    m_blockchain_isValid = ::stardust::core::fromJsonValue(blockchain, json[QString("blockchain")]);
    m_blockchain_isSet = !json[QString("blockchain")].isNull() && m_blockchain_isValid;

    m_address_isValid = ::stardust::core::fromJsonValue(address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_monies_isValid = ::stardust::core::fromJsonValue(monies, json[QString("monies")]);
    m_monies_isSet = !json[QString("monies")].isNull() && m_monies_isValid;
}

QString OAISDPlayerWalletGetResponse_wallet_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDPlayerWalletGetResponse_wallet_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_blockchain_isSet) {
        obj.insert(QString("blockchain"), ::stardust::core::toJsonValue(blockchain));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::stardust::core::toJsonValue(address));
    }
    if (monies.size() > 0) {
        obj.insert(QString("monies"), ::stardust::core::toJsonValue(monies));
    }
    return obj;
}

QString OAISDPlayerWalletGetResponse_wallet_inner::getBlockchain() const {
    return blockchain;
}
void OAISDPlayerWalletGetResponse_wallet_inner::setBlockchain(const QString &blockchain) {
    this->blockchain = blockchain;
    this->m_blockchain_isSet = true;
}

bool OAISDPlayerWalletGetResponse_wallet_inner::is_blockchain_Set() const{
    return m_blockchain_isSet;
}

bool OAISDPlayerWalletGetResponse_wallet_inner::is_blockchain_Valid() const{
    return m_blockchain_isValid;
}

QString OAISDPlayerWalletGetResponse_wallet_inner::getAddress() const {
    return address;
}
void OAISDPlayerWalletGetResponse_wallet_inner::setAddress(const QString &address) {
    this->address = address;
    this->m_address_isSet = true;
}

bool OAISDPlayerWalletGetResponse_wallet_inner::is_address_Set() const{
    return m_address_isSet;
}

bool OAISDPlayerWalletGetResponse_wallet_inner::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAISDPlayerWalletGetResponse_wallet_inner_monies_inner> OAISDPlayerWalletGetResponse_wallet_inner::getMonies() const {
    return monies;
}
void OAISDPlayerWalletGetResponse_wallet_inner::setMonies(const QList<OAISDPlayerWalletGetResponse_wallet_inner_monies_inner> &monies) {
    this->monies = monies;
    this->m_monies_isSet = true;
}

bool OAISDPlayerWalletGetResponse_wallet_inner::is_monies_Set() const{
    return m_monies_isSet;
}

bool OAISDPlayerWalletGetResponse_wallet_inner::is_monies_Valid() const{
    return m_monies_isValid;
}

bool OAISDPlayerWalletGetResponse_wallet_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blockchain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (monies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDPlayerWalletGetResponse_wallet_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blockchain_isValid && m_address_isValid && true;
}

} // namespace stardust
} // namespace core
