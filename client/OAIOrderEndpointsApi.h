/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrderEndpointsApi_H
#define OAI_OAIOrderEndpointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIObject.h"
#include "OAISDOrderBuyRequest.h"
#include "OAISDOrderCreateRequest.h"
#include "OAISDOrderCreateResponse.h"
#include "OAISDOrderGetAllResponse.h"
#include "OAISDOrderGetResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace stardust {
namespace core {

class OAIOrderEndpointsApi : public QObject {
    Q_OBJECT

public:
    OAIOrderEndpointsApi(const int timeOut = 0);
    ~OAIOrderEndpointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sd_order_buy_request OAISDOrderBuyRequest [required]
    */
    void orderBuyPost(const OAISDOrderBuyRequest &sd_order_buy_request);

    /**
    * @param[in]  order_id QString [required]
    */
    void orderCancelDelete(const QString &order_id);

    /**
    * @param[in]  sd_order_create_request OAISDOrderCreateRequest [required]
    */
    void orderCreatePost(const OAISDOrderCreateRequest &sd_order_create_request);

    /**
    * @param[in]  start QString [required]
    * @param[in]  limit QString [required]
    * @param[in]  player_id QString [optional]
    * @param[in]  status QString [optional]
    */
    void orderGetAllGet(const QString &start, const QString &limit, const ::stardust::core::OptionalParam<QString> &player_id = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &status = ::stardust::core::OptionalParam<QString>());

    /**
    * @param[in]  order_id QString [required]
    */
    void orderGetGet(const QString &order_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void orderBuyPostCallback(OAIHttpRequestWorker *worker);
    void orderCancelDeleteCallback(OAIHttpRequestWorker *worker);
    void orderCreatePostCallback(OAIHttpRequestWorker *worker);
    void orderGetAllGetCallback(OAIHttpRequestWorker *worker);
    void orderGetGetCallback(OAIHttpRequestWorker *worker);

signals:

    void orderBuyPostSignal(OAIObject summary);
    void orderCancelDeleteSignal(OAIObject summary);
    void orderCreatePostSignal(OAISDOrderCreateResponse summary);
    void orderGetAllGetSignal(QList<OAISDOrderGetAllResponse> summary);
    void orderGetGetSignal(OAISDOrderGetResponse summary);

    void orderBuyPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderCancelDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orderCreatePostSignalFull(OAIHttpRequestWorker *worker, OAISDOrderCreateResponse summary);
    void orderGetAllGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISDOrderGetAllResponse> summary);
    void orderGetGetSignalFull(OAIHttpRequestWorker *worker, OAISDOrderGetResponse summary);

    void orderBuyPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderCancelDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderCreatePostSignalE(OAISDOrderCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderGetAllGetSignalE(QList<OAISDOrderGetAllResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderGetGetSignalE(OAISDOrderGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);

    void orderBuyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderCancelDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderCreatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderGetAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderGetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace stardust
} // namespace core
#endif
