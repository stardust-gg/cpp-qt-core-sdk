/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDTemplateCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDTemplateCreateRequest::OAISDTemplateCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDTemplateCreateRequest::OAISDTemplateCreateRequest() {
    this->initializeModel();
}

OAISDTemplateCreateRequest::~OAISDTemplateCreateRequest() {}

void OAISDTemplateCreateRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_cap_isSet = false;
    m_cap_isValid = false;

    m_contract_type_isSet = false;
    m_contract_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_owner_address_isSet = false;
    m_owner_address_isValid = false;

    m_props_isSet = false;
    m_props_isValid = false;

    m_public_contract_metadata_isSet = false;
    m_public_contract_metadata_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAISDTemplateCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDTemplateCreateRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::stardust::core::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_cap_isValid = ::stardust::core::fromJsonValue(cap, json[QString("cap")]);
    m_cap_isSet = !json[QString("cap")].isNull() && m_cap_isValid;

    m_contract_type_isValid = ::stardust::core::fromJsonValue(contract_type, json[QString("contractType")]);
    m_contract_type_isSet = !json[QString("contractType")].isNull() && m_contract_type_isValid;

    m_type_isValid = ::stardust::core::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_owner_address_isValid = ::stardust::core::fromJsonValue(owner_address, json[QString("ownerAddress")]);
    m_owner_address_isSet = !json[QString("ownerAddress")].isNull() && m_owner_address_isValid;

    m_props_isValid = ::stardust::core::fromJsonValue(props, json[QString("props")]);
    m_props_isSet = !json[QString("props")].isNull() && m_props_isValid;

    m_public_contract_metadata_isValid = ::stardust::core::fromJsonValue(public_contract_metadata, json[QString("publicContractMetadata")]);
    m_public_contract_metadata_isSet = !json[QString("publicContractMetadata")].isNull() && m_public_contract_metadata_isValid;

    m_symbol_isValid = ::stardust::core::fromJsonValue(symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAISDTemplateCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDTemplateCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::stardust::core::toJsonValue(name));
    }
    if (m_cap_isSet) {
        obj.insert(QString("cap"), ::stardust::core::toJsonValue(cap));
    }
    if (m_contract_type_isSet) {
        obj.insert(QString("contractType"), ::stardust::core::toJsonValue(contract_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::stardust::core::toJsonValue(type));
    }
    if (m_owner_address_isSet) {
        obj.insert(QString("ownerAddress"), ::stardust::core::toJsonValue(owner_address));
    }
    if (props.isSet()) {
        obj.insert(QString("props"), ::stardust::core::toJsonValue(props));
    }
    if (m_public_contract_metadata_isSet) {
        obj.insert(QString("publicContractMetadata"), ::stardust::core::toJsonValue(public_contract_metadata));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::stardust::core::toJsonValue(symbol));
    }
    return obj;
}

QString OAISDTemplateCreateRequest::getName() const {
    return name;
}
void OAISDTemplateCreateRequest::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAISDTemplateCreateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAISDTemplateCreateRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISDTemplateCreateRequest::getCap() const {
    return cap;
}
void OAISDTemplateCreateRequest::setCap(const QString &cap) {
    this->cap = cap;
    this->m_cap_isSet = true;
}

bool OAISDTemplateCreateRequest::is_cap_Set() const{
    return m_cap_isSet;
}

bool OAISDTemplateCreateRequest::is_cap_Valid() const{
    return m_cap_isValid;
}

QString OAISDTemplateCreateRequest::getContractType() const {
    return contract_type;
}
void OAISDTemplateCreateRequest::setContractType(const QString &contract_type) {
    this->contract_type = contract_type;
    this->m_contract_type_isSet = true;
}

bool OAISDTemplateCreateRequest::is_contract_type_Set() const{
    return m_contract_type_isSet;
}

bool OAISDTemplateCreateRequest::is_contract_type_Valid() const{
    return m_contract_type_isValid;
}

QString OAISDTemplateCreateRequest::getType() const {
    return type;
}
void OAISDTemplateCreateRequest::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAISDTemplateCreateRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAISDTemplateCreateRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISDTemplateCreateRequest::getOwnerAddress() const {
    return owner_address;
}
void OAISDTemplateCreateRequest::setOwnerAddress(const QString &owner_address) {
    this->owner_address = owner_address;
    this->m_owner_address_isSet = true;
}

bool OAISDTemplateCreateRequest::is_owner_address_Set() const{
    return m_owner_address_isSet;
}

bool OAISDTemplateCreateRequest::is_owner_address_Valid() const{
    return m_owner_address_isValid;
}

OAISDTemplateCreateRequest_props OAISDTemplateCreateRequest::getProps() const {
    return props;
}
void OAISDTemplateCreateRequest::setProps(const OAISDTemplateCreateRequest_props &props) {
    this->props = props;
    this->m_props_isSet = true;
}

bool OAISDTemplateCreateRequest::is_props_Set() const{
    return m_props_isSet;
}

bool OAISDTemplateCreateRequest::is_props_Valid() const{
    return m_props_isValid;
}

OAIObject OAISDTemplateCreateRequest::getPublicContractMetadata() const {
    return public_contract_metadata;
}
void OAISDTemplateCreateRequest::setPublicContractMetadata(const OAIObject &public_contract_metadata) {
    this->public_contract_metadata = public_contract_metadata;
    this->m_public_contract_metadata_isSet = true;
}

bool OAISDTemplateCreateRequest::is_public_contract_metadata_Set() const{
    return m_public_contract_metadata_isSet;
}

bool OAISDTemplateCreateRequest::is_public_contract_metadata_Valid() const{
    return m_public_contract_metadata_isValid;
}

QString OAISDTemplateCreateRequest::getSymbol() const {
    return symbol;
}
void OAISDTemplateCreateRequest::setSymbol(const QString &symbol) {
    this->symbol = symbol;
    this->m_symbol_isSet = true;
}

bool OAISDTemplateCreateRequest::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAISDTemplateCreateRequest::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAISDTemplateCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (props.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_contract_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDTemplateCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_cap_isValid && m_type_isValid && m_props_isValid && true;
}

} // namespace stardust
} // namespace core
