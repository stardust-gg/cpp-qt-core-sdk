/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDTokenTransferRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDTokenTransferRequest::OAISDTokenTransferRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDTokenTransferRequest::OAISDTokenTransferRequest() {
    this->initializeModel();
}

OAISDTokenTransferRequest::~OAISDTokenTransferRequest() {}

void OAISDTokenTransferRequest::initializeModel() {

    m_from_player_id_isSet = false;
    m_from_player_id_isValid = false;

    m_to_player_id_isSet = false;
    m_to_player_id_isValid = false;

    m_token_objects_isSet = false;
    m_token_objects_isValid = false;
}

void OAISDTokenTransferRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDTokenTransferRequest::fromJsonObject(QJsonObject json) {

    m_from_player_id_isValid = ::stardust::core::fromJsonValue(from_player_id, json[QString("fromPlayerId")]);
    m_from_player_id_isSet = !json[QString("fromPlayerId")].isNull() && m_from_player_id_isValid;

    m_to_player_id_isValid = ::stardust::core::fromJsonValue(to_player_id, json[QString("toPlayerId")]);
    m_to_player_id_isSet = !json[QString("toPlayerId")].isNull() && m_to_player_id_isValid;

    m_token_objects_isValid = ::stardust::core::fromJsonValue(token_objects, json[QString("tokenObjects")]);
    m_token_objects_isSet = !json[QString("tokenObjects")].isNull() && m_token_objects_isValid;
}

QString OAISDTokenTransferRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDTokenTransferRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_from_player_id_isSet) {
        obj.insert(QString("fromPlayerId"), ::stardust::core::toJsonValue(from_player_id));
    }
    if (m_to_player_id_isSet) {
        obj.insert(QString("toPlayerId"), ::stardust::core::toJsonValue(to_player_id));
    }
    if (token_objects.size() > 0) {
        obj.insert(QString("tokenObjects"), ::stardust::core::toJsonValue(token_objects));
    }
    return obj;
}

QString OAISDTokenTransferRequest::getFromPlayerId() const {
    return from_player_id;
}
void OAISDTokenTransferRequest::setFromPlayerId(const QString &from_player_id) {
    this->from_player_id = from_player_id;
    this->m_from_player_id_isSet = true;
}

bool OAISDTokenTransferRequest::is_from_player_id_Set() const{
    return m_from_player_id_isSet;
}

bool OAISDTokenTransferRequest::is_from_player_id_Valid() const{
    return m_from_player_id_isValid;
}

QString OAISDTokenTransferRequest::getToPlayerId() const {
    return to_player_id;
}
void OAISDTokenTransferRequest::setToPlayerId(const QString &to_player_id) {
    this->to_player_id = to_player_id;
    this->m_to_player_id_isSet = true;
}

bool OAISDTokenTransferRequest::is_to_player_id_Set() const{
    return m_to_player_id_isSet;
}

bool OAISDTokenTransferRequest::is_to_player_id_Valid() const{
    return m_to_player_id_isValid;
}

QList<OAISDTokenBurnRequest_tokenObjects_inner> OAISDTokenTransferRequest::getTokenObjects() const {
    return token_objects;
}
void OAISDTokenTransferRequest::setTokenObjects(const QList<OAISDTokenBurnRequest_tokenObjects_inner> &token_objects) {
    this->token_objects = token_objects;
    this->m_token_objects_isSet = true;
}

bool OAISDTokenTransferRequest::is_token_objects_Set() const{
    return m_token_objects_isSet;
}

bool OAISDTokenTransferRequest::is_token_objects_Valid() const{
    return m_token_objects_isValid;
}

bool OAISDTokenTransferRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (token_objects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDTokenTransferRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_player_id_isValid && m_to_player_id_isValid && m_token_objects_isValid && true;
}

} // namespace stardust
} // namespace core
