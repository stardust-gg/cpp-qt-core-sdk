/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDPlayerGetInventoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDPlayerGetInventoryResponse::OAISDPlayerGetInventoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDPlayerGetInventoryResponse::OAISDPlayerGetInventoryResponse() {
    this->initializeModel();
}

OAISDPlayerGetInventoryResponse::~OAISDPlayerGetInventoryResponse() {}

void OAISDPlayerGetInventoryResponse::initializeModel() {

    m_token_id_isSet = false;
    m_token_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_props_isSet = false;
    m_props_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_public_metadata_isSet = false;
    m_public_metadata_isValid = false;

    m_blockchain_token_id_isSet = false;
    m_blockchain_token_id_isValid = false;

    m_blockchain_explorer_link_isSet = false;
    m_blockchain_explorer_link_isValid = false;
}

void OAISDPlayerGetInventoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDPlayerGetInventoryResponse::fromJsonObject(QJsonObject json) {

    m_token_id_isValid = ::stardust::core::fromJsonValue(token_id, json[QString("tokenId")]);
    m_token_id_isSet = !json[QString("tokenId")].isNull() && m_token_id_isValid;

    m_amount_isValid = ::stardust::core::fromJsonValue(amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_template_id_isValid = ::stardust::core::fromJsonValue(template_id, json[QString("templateId")]);
    m_template_id_isSet = !json[QString("templateId")].isNull() && m_template_id_isValid;

    m_props_isValid = ::stardust::core::fromJsonValue(props, json[QString("props")]);
    m_props_isSet = !json[QString("props")].isNull() && m_props_isValid;

    m_id_isValid = ::stardust::core::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_public_metadata_isValid = ::stardust::core::fromJsonValue(public_metadata, json[QString("publicMetadata")]);
    m_public_metadata_isSet = !json[QString("publicMetadata")].isNull() && m_public_metadata_isValid;

    m_blockchain_token_id_isValid = ::stardust::core::fromJsonValue(blockchain_token_id, json[QString("blockchainTokenId")]);
    m_blockchain_token_id_isSet = !json[QString("blockchainTokenId")].isNull() && m_blockchain_token_id_isValid;

    m_blockchain_explorer_link_isValid = ::stardust::core::fromJsonValue(blockchain_explorer_link, json[QString("blockchainExplorerLink")]);
    m_blockchain_explorer_link_isSet = !json[QString("blockchainExplorerLink")].isNull() && m_blockchain_explorer_link_isValid;
}

QString OAISDPlayerGetInventoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDPlayerGetInventoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_token_id_isSet) {
        obj.insert(QString("tokenId"), ::stardust::core::toJsonValue(token_id));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::stardust::core::toJsonValue(amount));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("templateId"), ::stardust::core::toJsonValue(template_id));
    }
    if (props.isSet()) {
        obj.insert(QString("props"), ::stardust::core::toJsonValue(props));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::stardust::core::toJsonValue(id));
    }
    if (m_public_metadata_isSet) {
        obj.insert(QString("publicMetadata"), ::stardust::core::toJsonValue(public_metadata));
    }
    if (m_blockchain_token_id_isSet) {
        obj.insert(QString("blockchainTokenId"), ::stardust::core::toJsonValue(blockchain_token_id));
    }
    if (m_blockchain_explorer_link_isSet) {
        obj.insert(QString("blockchainExplorerLink"), ::stardust::core::toJsonValue(blockchain_explorer_link));
    }
    return obj;
}

qint32 OAISDPlayerGetInventoryResponse::getTokenId() const {
    return token_id;
}
void OAISDPlayerGetInventoryResponse::setTokenId(const qint32 &token_id) {
    this->token_id = token_id;
    this->m_token_id_isSet = true;
}

bool OAISDPlayerGetInventoryResponse::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAISDPlayerGetInventoryResponse::is_token_id_Valid() const{
    return m_token_id_isValid;
}

QString OAISDPlayerGetInventoryResponse::getAmount() const {
    return amount;
}
void OAISDPlayerGetInventoryResponse::setAmount(const QString &amount) {
    this->amount = amount;
    this->m_amount_isSet = true;
}

bool OAISDPlayerGetInventoryResponse::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAISDPlayerGetInventoryResponse::is_amount_Valid() const{
    return m_amount_isValid;
}

qint32 OAISDPlayerGetInventoryResponse::getTemplateId() const {
    return template_id;
}
void OAISDPlayerGetInventoryResponse::setTemplateId(const qint32 &template_id) {
    this->template_id = template_id;
    this->m_template_id_isSet = true;
}

bool OAISDPlayerGetInventoryResponse::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAISDPlayerGetInventoryResponse::is_template_id_Valid() const{
    return m_template_id_isValid;
}

OAISDPlayerGetInventoryResponse_props OAISDPlayerGetInventoryResponse::getProps() const {
    return props;
}
void OAISDPlayerGetInventoryResponse::setProps(const OAISDPlayerGetInventoryResponse_props &props) {
    this->props = props;
    this->m_props_isSet = true;
}

bool OAISDPlayerGetInventoryResponse::is_props_Set() const{
    return m_props_isSet;
}

bool OAISDPlayerGetInventoryResponse::is_props_Valid() const{
    return m_props_isValid;
}

qint32 OAISDPlayerGetInventoryResponse::getId() const {
    return id;
}
void OAISDPlayerGetInventoryResponse::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAISDPlayerGetInventoryResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAISDPlayerGetInventoryResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAISDPlayerGetInventoryResponse::getPublicMetadata() const {
    return public_metadata;
}
void OAISDPlayerGetInventoryResponse::setPublicMetadata(const OAIObject &public_metadata) {
    this->public_metadata = public_metadata;
    this->m_public_metadata_isSet = true;
}

bool OAISDPlayerGetInventoryResponse::is_public_metadata_Set() const{
    return m_public_metadata_isSet;
}

bool OAISDPlayerGetInventoryResponse::is_public_metadata_Valid() const{
    return m_public_metadata_isValid;
}

QString OAISDPlayerGetInventoryResponse::getBlockchainTokenId() const {
    return blockchain_token_id;
}
void OAISDPlayerGetInventoryResponse::setBlockchainTokenId(const QString &blockchain_token_id) {
    this->blockchain_token_id = blockchain_token_id;
    this->m_blockchain_token_id_isSet = true;
}

bool OAISDPlayerGetInventoryResponse::is_blockchain_token_id_Set() const{
    return m_blockchain_token_id_isSet;
}

bool OAISDPlayerGetInventoryResponse::is_blockchain_token_id_Valid() const{
    return m_blockchain_token_id_isValid;
}

QString OAISDPlayerGetInventoryResponse::getBlockchainExplorerLink() const {
    return blockchain_explorer_link;
}
void OAISDPlayerGetInventoryResponse::setBlockchainExplorerLink(const QString &blockchain_explorer_link) {
    this->blockchain_explorer_link = blockchain_explorer_link;
    this->m_blockchain_explorer_link_isSet = true;
}

bool OAISDPlayerGetInventoryResponse::is_blockchain_explorer_link_Set() const{
    return m_blockchain_explorer_link_isSet;
}

bool OAISDPlayerGetInventoryResponse::is_blockchain_explorer_link_Valid() const{
    return m_blockchain_explorer_link_isValid;
}

bool OAISDPlayerGetInventoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (props.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blockchain_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blockchain_explorer_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDPlayerGetInventoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_id_isValid && m_amount_isValid && true;
}

} // namespace stardust
} // namespace core
