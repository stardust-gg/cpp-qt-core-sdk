/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISDTokenGetResponse.h
 *
 * token data
 */

#ifndef OAISDTokenGetResponse_H
#define OAISDTokenGetResponse_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAISDPlayerGetInventoryResponse_props.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace stardust {
namespace core {
class OAISDPlayerGetInventoryResponse_props;

class OAISDTokenGetResponse : public OAIObject {
public:
    OAISDTokenGetResponse();
    OAISDTokenGetResponse(QString json);
    ~OAISDTokenGetResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getGameId() const;
    void setGameId(const qint32 &game_id);
    bool is_game_id_Set() const;
    bool is_game_id_Valid() const;

    qint32 getTemplateId() const;
    void setTemplateId(const qint32 &template_id);
    bool is_template_id_Set() const;
    bool is_template_id_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getFlags() const;
    void setFlags(const qint32 &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    OAISDPlayerGetInventoryResponse_props getProps() const;
    void setProps(const OAISDPlayerGetInventoryResponse_props &props);
    bool is_props_Set() const;
    bool is_props_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    OAIObject getPublicMetadata() const;
    void setPublicMetadata(const OAIObject &public_metadata);
    bool is_public_metadata_Set() const;
    bool is_public_metadata_Valid() const;

    QString getBlockchainTokenId() const;
    void setBlockchainTokenId(const QString &blockchain_token_id);
    bool is_blockchain_token_id_Set() const;
    bool is_blockchain_token_id_Valid() const;

    QString getBlockchainExplorerLink() const;
    void setBlockchainExplorerLink(const QString &blockchain_explorer_link);
    bool is_blockchain_explorer_link_Set() const;
    bool is_blockchain_explorer_link_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 game_id;
    bool m_game_id_isSet;
    bool m_game_id_isValid;

    qint32 template_id;
    bool m_template_id_isSet;
    bool m_template_id_isValid;

    qint32 id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    OAISDPlayerGetInventoryResponse_props props;
    bool m_props_isSet;
    bool m_props_isValid;

    QString owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    OAIObject public_metadata;
    bool m_public_metadata_isSet;
    bool m_public_metadata_isValid;

    QString blockchain_token_id;
    bool m_blockchain_token_id_isSet;
    bool m_blockchain_token_id_isValid;

    QString blockchain_explorer_link;
    bool m_blockchain_explorer_link_isSet;
    bool m_blockchain_explorer_link_isValid;
};

} // namespace stardust
} // namespace core

Q_DECLARE_METATYPE(stardust::core::OAISDTokenGetResponse)

#endif // OAISDTokenGetResponse_H
