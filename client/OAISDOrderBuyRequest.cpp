/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDOrderBuyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDOrderBuyRequest::OAISDOrderBuyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDOrderBuyRequest::OAISDOrderBuyRequest() {
    this->initializeModel();
}

OAISDOrderBuyRequest::~OAISDOrderBuyRequest() {}

void OAISDOrderBuyRequest::initializeModel() {

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_accepted_by_isSet = false;
    m_accepted_by_isValid = false;
}

void OAISDOrderBuyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDOrderBuyRequest::fromJsonObject(QJsonObject json) {

    m_order_id_isValid = ::stardust::core::fromJsonValue(order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_accepted_by_isValid = ::stardust::core::fromJsonValue(accepted_by, json[QString("acceptedBy")]);
    m_accepted_by_isSet = !json[QString("acceptedBy")].isNull() && m_accepted_by_isValid;
}

QString OAISDOrderBuyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDOrderBuyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::stardust::core::toJsonValue(order_id));
    }
    if (m_accepted_by_isSet) {
        obj.insert(QString("acceptedBy"), ::stardust::core::toJsonValue(accepted_by));
    }
    return obj;
}

qint32 OAISDOrderBuyRequest::getOrderId() const {
    return order_id;
}
void OAISDOrderBuyRequest::setOrderId(const qint32 &order_id) {
    this->order_id = order_id;
    this->m_order_id_isSet = true;
}

bool OAISDOrderBuyRequest::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAISDOrderBuyRequest::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAISDOrderBuyRequest::getAcceptedBy() const {
    return accepted_by;
}
void OAISDOrderBuyRequest::setAcceptedBy(const QString &accepted_by) {
    this->accepted_by = accepted_by;
    this->m_accepted_by_isSet = true;
}

bool OAISDOrderBuyRequest::is_accepted_by_Set() const{
    return m_accepted_by_isSet;
}

bool OAISDOrderBuyRequest::is_accepted_by_Valid() const{
    return m_accepted_by_isValid;
}

bool OAISDOrderBuyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepted_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDOrderBuyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_order_id_isValid && m_accepted_by_isValid && true;
}

} // namespace stardust
} // namespace core
