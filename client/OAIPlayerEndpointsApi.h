/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlayerEndpointsApi_H
#define OAI_OAIPlayerEndpointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIObject.h"
#include "OAISDPlayerCountResponse.h"
#include "OAISDPlayerCreateRequest.h"
#include "OAISDPlayerCreateResponse.h"
#include "OAISDPlayerGetAllResponse.h"
#include "OAISDPlayerGetIdResponse.h"
#include "OAISDPlayerGetIdsResponse.h"
#include "OAISDPlayerGetInventoryResponse.h"
#include "OAISDPlayerGetResponse.h"
#include "OAISDPlayerMutateRequest.h"
#include "OAISDPlayerWalletGetResponse.h"
#include "OAISDPlayerWithdrawRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace stardust {
namespace core {

class OAIPlayerEndpointsApi : public QObject {
    Q_OBJECT

public:
    OAIPlayerEndpointsApi(const int timeOut = 0);
    ~OAIPlayerEndpointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  filter QString [optional]
    */
    void playerCountGet(const ::stardust::core::OptionalParam<QString> &filter = ::stardust::core::OptionalParam<QString>());

    /**
    * @param[in]  sd_player_create_request OAISDPlayerCreateRequest [required]
    */
    void playerCreatePost(const OAISDPlayerCreateRequest &sd_player_create_request);

    /**
    * @param[in]  start QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  limit QString [optional]
    */
    void playerGetAllGet(const ::stardust::core::OptionalParam<QString> &start = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &filter = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &limit = ::stardust::core::OptionalParam<QString>());

    /**
    * @param[in]  player_id QString [required]
    */
    void playerGetGet(const QString &player_id);

    /**
    * @param[in]  unique_id QString [required]
    */
    void playerGetIdGet(const QString &unique_id);


    void playerGetIdsGet();

    /**
    * @param[in]  player_id QString [required]
    * @param[in]  start QString [optional]
    * @param[in]  template_ids QString [optional]
    * @param[in]  token_ids QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  return_explorer_links QString [optional]
    */
    void playerGetInventoryGet(const QString &player_id, const ::stardust::core::OptionalParam<QString> &start = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &template_ids = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &token_ids = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &limit = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &return_explorer_links = ::stardust::core::OptionalParam<QString>());

    /**
    * @param[in]  sd_player_mutate_request OAISDPlayerMutateRequest [required]
    */
    void playerMutatePut(const OAISDPlayerMutateRequest &sd_player_mutate_request);

    /**
    * @param[in]  player_id QString [required]
    */
    void playerRemoveDelete(const QString &player_id);

    /**
    * @param[in]  player_id QString [required]
    */
    void playerWalletGetGet(const QString &player_id);

    /**
    * @param[in]  sd_player_withdraw_request OAISDPlayerWithdrawRequest [required]
    */
    void playerWithdrawPost(const OAISDPlayerWithdrawRequest &sd_player_withdraw_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void playerCountGetCallback(OAIHttpRequestWorker *worker);
    void playerCreatePostCallback(OAIHttpRequestWorker *worker);
    void playerGetAllGetCallback(OAIHttpRequestWorker *worker);
    void playerGetGetCallback(OAIHttpRequestWorker *worker);
    void playerGetIdGetCallback(OAIHttpRequestWorker *worker);
    void playerGetIdsGetCallback(OAIHttpRequestWorker *worker);
    void playerGetInventoryGetCallback(OAIHttpRequestWorker *worker);
    void playerMutatePutCallback(OAIHttpRequestWorker *worker);
    void playerRemoveDeleteCallback(OAIHttpRequestWorker *worker);
    void playerWalletGetGetCallback(OAIHttpRequestWorker *worker);
    void playerWithdrawPostCallback(OAIHttpRequestWorker *worker);

signals:

    void playerCountGetSignal(OAISDPlayerCountResponse summary);
    void playerCreatePostSignal(OAISDPlayerCreateResponse summary);
    void playerGetAllGetSignal(QList<OAISDPlayerGetAllResponse> summary);
    void playerGetGetSignal(OAISDPlayerGetResponse summary);
    void playerGetIdGetSignal(OAISDPlayerGetIdResponse summary);
    void playerGetIdsGetSignal(QList<OAISDPlayerGetIdsResponse> summary);
    void playerGetInventoryGetSignal(QList<OAISDPlayerGetInventoryResponse> summary);
    void playerMutatePutSignal(OAIObject summary);
    void playerRemoveDeleteSignal(OAIObject summary);
    void playerWalletGetGetSignal(OAISDPlayerWalletGetResponse summary);
    void playerWithdrawPostSignal(OAIObject summary);

    void playerCountGetSignalFull(OAIHttpRequestWorker *worker, OAISDPlayerCountResponse summary);
    void playerCreatePostSignalFull(OAIHttpRequestWorker *worker, OAISDPlayerCreateResponse summary);
    void playerGetAllGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISDPlayerGetAllResponse> summary);
    void playerGetGetSignalFull(OAIHttpRequestWorker *worker, OAISDPlayerGetResponse summary);
    void playerGetIdGetSignalFull(OAIHttpRequestWorker *worker, OAISDPlayerGetIdResponse summary);
    void playerGetIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISDPlayerGetIdsResponse> summary);
    void playerGetInventoryGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISDPlayerGetInventoryResponse> summary);
    void playerMutatePutSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void playerRemoveDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void playerWalletGetGetSignalFull(OAIHttpRequestWorker *worker, OAISDPlayerWalletGetResponse summary);
    void playerWithdrawPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    void playerCountGetSignalE(OAISDPlayerCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerCreatePostSignalE(OAISDPlayerCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGetAllGetSignalE(QList<OAISDPlayerGetAllResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGetGetSignalE(OAISDPlayerGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGetIdGetSignalE(OAISDPlayerGetIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGetIdsGetSignalE(QList<OAISDPlayerGetIdsResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGetInventoryGetSignalE(QList<OAISDPlayerGetInventoryResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerMutatePutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerRemoveDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerWalletGetGetSignalE(OAISDPlayerWalletGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playerWithdrawPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);

    void playerCountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerCreatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGetAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGetIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGetIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerGetInventoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerMutatePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerRemoveDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerWalletGetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerWithdrawPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace stardust
} // namespace core
#endif
