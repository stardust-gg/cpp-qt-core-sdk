/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITemplateEndpointsApi_H
#define OAI_OAITemplateEndpointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIObject.h"
#include "OAISDTemplateCountResponse.h"
#include "OAISDTemplateCreateRequest.h"
#include "OAISDTemplateCreateResponse.h"
#include "OAISDTemplateGetAllResponse.h"
#include "OAISDTemplateGetResponse.h"
#include "OAISDTemplateGetTokensResponse.h"
#include "OAISDTemplateMutateRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace stardust {
namespace core {

class OAITemplateEndpointsApi : public QObject {
    Q_OBJECT

public:
    OAITemplateEndpointsApi(const int timeOut = 0);
    ~OAITemplateEndpointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  filter QString [optional]
    */
    void templateCountGet(const ::stardust::core::OptionalParam<QString> &filter = ::stardust::core::OptionalParam<QString>());

    /**
    * @param[in]  sd_template_create_request OAISDTemplateCreateRequest [required]
    */
    void templateCreatePost(const OAISDTemplateCreateRequest &sd_template_create_request);

    /**
    * @param[in]  start QString [required]
    * @param[in]  limit QString [required]
    * @param[in]  contract_addresses QString [optional]
    * @param[in]  filter QString [optional]
    */
    void templateGetAllGet(const QString &start, const QString &limit, const ::stardust::core::OptionalParam<QString> &contract_addresses = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &filter = ::stardust::core::OptionalParam<QString>());

    /**
    * @param[in]  template_id QString [required]
    */
    void templateGetGet(const QString &template_id);

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  start QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  include_deleted QString [optional]
    */
    void templateGetTokensGet(const QString &template_id, const ::stardust::core::OptionalParam<QString> &start = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &limit = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &include_deleted = ::stardust::core::OptionalParam<QString>());

    /**
    * @param[in]  sd_template_mutate_request OAISDTemplateMutateRequest [required]
    */
    void templateMutatePut(const OAISDTemplateMutateRequest &sd_template_mutate_request);

    /**
    * @param[in]  template_id QString [required]
    * @param[in]  props QString [required]
    */
    void templatePropsRemoveDelete(const QString &template_id, const QString &props);

    /**
    * @param[in]  template_id QString [required]
    */
    void templateRemoveDelete(const QString &template_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void templateCountGetCallback(OAIHttpRequestWorker *worker);
    void templateCreatePostCallback(OAIHttpRequestWorker *worker);
    void templateGetAllGetCallback(OAIHttpRequestWorker *worker);
    void templateGetGetCallback(OAIHttpRequestWorker *worker);
    void templateGetTokensGetCallback(OAIHttpRequestWorker *worker);
    void templateMutatePutCallback(OAIHttpRequestWorker *worker);
    void templatePropsRemoveDeleteCallback(OAIHttpRequestWorker *worker);
    void templateRemoveDeleteCallback(OAIHttpRequestWorker *worker);

signals:

    void templateCountGetSignal(OAISDTemplateCountResponse summary);
    void templateCreatePostSignal(OAISDTemplateCreateResponse summary);
    void templateGetAllGetSignal(QList<OAISDTemplateGetAllResponse> summary);
    void templateGetGetSignal(OAISDTemplateGetResponse summary);
    void templateGetTokensGetSignal(QList<OAISDTemplateGetTokensResponse> summary);
    void templateMutatePutSignal(OAIObject summary);
    void templatePropsRemoveDeleteSignal(OAIObject summary);
    void templateRemoveDeleteSignal(OAIObject summary);

    void templateCountGetSignalFull(OAIHttpRequestWorker *worker, OAISDTemplateCountResponse summary);
    void templateCreatePostSignalFull(OAIHttpRequestWorker *worker, OAISDTemplateCreateResponse summary);
    void templateGetAllGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISDTemplateGetAllResponse> summary);
    void templateGetGetSignalFull(OAIHttpRequestWorker *worker, OAISDTemplateGetResponse summary);
    void templateGetTokensGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISDTemplateGetTokensResponse> summary);
    void templateMutatePutSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void templatePropsRemoveDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void templateRemoveDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    void templateCountGetSignalE(OAISDTemplateCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templateCreatePostSignalE(OAISDTemplateCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templateGetAllGetSignalE(QList<OAISDTemplateGetAllResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templateGetGetSignalE(OAISDTemplateGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templateGetTokensGetSignalE(QList<OAISDTemplateGetTokensResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templateMutatePutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templatePropsRemoveDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void templateRemoveDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);

    void templateCountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templateCreatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templateGetAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templateGetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templateGetTokensGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templateMutatePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templatePropsRemoveDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void templateRemoveDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace stardust
} // namespace core
#endif
