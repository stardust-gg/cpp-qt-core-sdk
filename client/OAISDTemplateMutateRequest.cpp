/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDTemplateMutateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDTemplateMutateRequest::OAISDTemplateMutateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDTemplateMutateRequest::OAISDTemplateMutateRequest() {
    this->initializeModel();
}

OAISDTemplateMutateRequest::~OAISDTemplateMutateRequest() {}

void OAISDTemplateMutateRequest::initializeModel() {

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_props_isSet = false;
    m_props_isValid = false;

    m_public_contract_metadata_isSet = false;
    m_public_contract_metadata_isValid = false;

    m_public_token_metadata_isSet = false;
    m_public_token_metadata_isValid = false;
}

void OAISDTemplateMutateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDTemplateMutateRequest::fromJsonObject(QJsonObject json) {

    m_template_id_isValid = ::stardust::core::fromJsonValue(template_id, json[QString("templateId")]);
    m_template_id_isSet = !json[QString("templateId")].isNull() && m_template_id_isValid;

    m_props_isValid = ::stardust::core::fromJsonValue(props, json[QString("props")]);
    m_props_isSet = !json[QString("props")].isNull() && m_props_isValid;

    m_public_contract_metadata_isValid = ::stardust::core::fromJsonValue(public_contract_metadata, json[QString("publicContractMetadata")]);
    m_public_contract_metadata_isSet = !json[QString("publicContractMetadata")].isNull() && m_public_contract_metadata_isValid;

    m_public_token_metadata_isValid = ::stardust::core::fromJsonValue(public_token_metadata, json[QString("publicTokenMetadata")]);
    m_public_token_metadata_isSet = !json[QString("publicTokenMetadata")].isNull() && m_public_token_metadata_isValid;
}

QString OAISDTemplateMutateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDTemplateMutateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_template_id_isSet) {
        obj.insert(QString("templateId"), ::stardust::core::toJsonValue(template_id));
    }
    if (m_props_isSet) {
        obj.insert(QString("props"), ::stardust::core::toJsonValue(props));
    }
    if (m_public_contract_metadata_isSet) {
        obj.insert(QString("publicContractMetadata"), ::stardust::core::toJsonValue(public_contract_metadata));
    }
    if (m_public_token_metadata_isSet) {
        obj.insert(QString("publicTokenMetadata"), ::stardust::core::toJsonValue(public_token_metadata));
    }
    return obj;
}

qint32 OAISDTemplateMutateRequest::getTemplateId() const {
    return template_id;
}
void OAISDTemplateMutateRequest::setTemplateId(const qint32 &template_id) {
    this->template_id = template_id;
    this->m_template_id_isSet = true;
}

bool OAISDTemplateMutateRequest::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAISDTemplateMutateRequest::is_template_id_Valid() const{
    return m_template_id_isValid;
}

OAIObject OAISDTemplateMutateRequest::getProps() const {
    return props;
}
void OAISDTemplateMutateRequest::setProps(const OAIObject &props) {
    this->props = props;
    this->m_props_isSet = true;
}

bool OAISDTemplateMutateRequest::is_props_Set() const{
    return m_props_isSet;
}

bool OAISDTemplateMutateRequest::is_props_Valid() const{
    return m_props_isValid;
}

OAIObject OAISDTemplateMutateRequest::getPublicContractMetadata() const {
    return public_contract_metadata;
}
void OAISDTemplateMutateRequest::setPublicContractMetadata(const OAIObject &public_contract_metadata) {
    this->public_contract_metadata = public_contract_metadata;
    this->m_public_contract_metadata_isSet = true;
}

bool OAISDTemplateMutateRequest::is_public_contract_metadata_Set() const{
    return m_public_contract_metadata_isSet;
}

bool OAISDTemplateMutateRequest::is_public_contract_metadata_Valid() const{
    return m_public_contract_metadata_isValid;
}

OAIObject OAISDTemplateMutateRequest::getPublicTokenMetadata() const {
    return public_token_metadata;
}
void OAISDTemplateMutateRequest::setPublicTokenMetadata(const OAIObject &public_token_metadata) {
    this->public_token_metadata = public_token_metadata;
    this->m_public_token_metadata_isSet = true;
}

bool OAISDTemplateMutateRequest::is_public_token_metadata_Set() const{
    return m_public_token_metadata_isSet;
}

bool OAISDTemplateMutateRequest::is_public_token_metadata_Valid() const{
    return m_public_token_metadata_isValid;
}

bool OAISDTemplateMutateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_props_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_contract_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_token_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDTemplateMutateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_template_id_isValid && true;
}

} // namespace stardust
} // namespace core
