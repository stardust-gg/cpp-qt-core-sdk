/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDGameMutateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDGameMutateRequest::OAISDGameMutateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDGameMutateRequest::OAISDGameMutateRequest() {
    this->initializeModel();
}

OAISDGameMutateRequest::~OAISDGameMutateRequest() {}

void OAISDGameMutateRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_news_isSet = false;
    m_news_isValid = false;

    m_props_isSet = false;
    m_props_isValid = false;

    m_test_mode_isSet = false;
    m_test_mode_isValid = false;
}

void OAISDGameMutateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDGameMutateRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::stardust::core::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_news_isValid = ::stardust::core::fromJsonValue(news, json[QString("news")]);
    m_news_isSet = !json[QString("news")].isNull() && m_news_isValid;

    m_props_isValid = ::stardust::core::fromJsonValue(props, json[QString("props")]);
    m_props_isSet = !json[QString("props")].isNull() && m_props_isValid;

    m_test_mode_isValid = ::stardust::core::fromJsonValue(test_mode, json[QString("testMode")]);
    m_test_mode_isSet = !json[QString("testMode")].isNull() && m_test_mode_isValid;
}

QString OAISDGameMutateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDGameMutateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::stardust::core::toJsonValue(description));
    }
    if (m_news_isSet) {
        obj.insert(QString("news"), ::stardust::core::toJsonValue(news));
    }
    if (m_props_isSet) {
        obj.insert(QString("props"), ::stardust::core::toJsonValue(props));
    }
    if (m_test_mode_isSet) {
        obj.insert(QString("testMode"), ::stardust::core::toJsonValue(test_mode));
    }
    return obj;
}

QString OAISDGameMutateRequest::getDescription() const {
    return description;
}
void OAISDGameMutateRequest::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAISDGameMutateRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAISDGameMutateRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISDGameMutateRequest::getNews() const {
    return news;
}
void OAISDGameMutateRequest::setNews(const QString &news) {
    this->news = news;
    this->m_news_isSet = true;
}

bool OAISDGameMutateRequest::is_news_Set() const{
    return m_news_isSet;
}

bool OAISDGameMutateRequest::is_news_Valid() const{
    return m_news_isValid;
}

OAIObject OAISDGameMutateRequest::getProps() const {
    return props;
}
void OAISDGameMutateRequest::setProps(const OAIObject &props) {
    this->props = props;
    this->m_props_isSet = true;
}

bool OAISDGameMutateRequest::is_props_Set() const{
    return m_props_isSet;
}

bool OAISDGameMutateRequest::is_props_Valid() const{
    return m_props_isValid;
}

bool OAISDGameMutateRequest::isTestMode() const {
    return test_mode;
}
void OAISDGameMutateRequest::setTestMode(const bool &test_mode) {
    this->test_mode = test_mode;
    this->m_test_mode_isSet = true;
}

bool OAISDGameMutateRequest::is_test_mode_Set() const{
    return m_test_mode_isSet;
}

bool OAISDGameMutateRequest::is_test_mode_Valid() const{
    return m_test_mode_isValid;
}

bool OAISDGameMutateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_news_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_props_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDGameMutateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace stardust
} // namespace core
