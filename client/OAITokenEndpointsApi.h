/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITokenEndpointsApi_H
#define OAI_OAITokenEndpointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIObject.h"
#include "OAISDTokenBurnRequest.h"
#include "OAISDTokenGetResponse.h"
#include "OAISDTokenMintBulkRequest.h"
#include "OAISDTokenMutateRequest.h"
#include "OAISDTokenTransferRequest.h"
#include "OAISDTokenWithdrawRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace stardust {
namespace core {

class OAITokenEndpointsApi : public QObject {
    Q_OBJECT

public:
    OAITokenEndpointsApi(const int timeOut = 0);
    ~OAITokenEndpointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sd_token_burn_request OAISDTokenBurnRequest [required]
    */
    void tokenBurnPost(const OAISDTokenBurnRequest &sd_token_burn_request);

    /**
    * @param[in]  token_ids QString [optional]
    * @param[in]  return_explorer_links QString [optional]
    */
    void tokenGetGet(const ::stardust::core::OptionalParam<QString> &token_ids = ::stardust::core::OptionalParam<QString>(), const ::stardust::core::OptionalParam<QString> &return_explorer_links = ::stardust::core::OptionalParam<QString>());

    /**
    * @param[in]  sd_token_mint_bulk_request OAISDTokenMintBulkRequest [required]
    */
    void tokenMintBulkPost(const OAISDTokenMintBulkRequest &sd_token_mint_bulk_request);

    /**
    * @param[in]  sd_token_mutate_request OAISDTokenMutateRequest [required]
    */
    void tokenMutatePut(const OAISDTokenMutateRequest &sd_token_mutate_request);

    /**
    * @param[in]  token_id QString [required]
    * @param[in]  props QString [required]
    */
    void tokenPropsRemoveDelete(const QString &token_id, const QString &props);

    /**
    * @param[in]  sd_token_transfer_request OAISDTokenTransferRequest [required]
    */
    void tokenTransferPost(const OAISDTokenTransferRequest &sd_token_transfer_request);

    /**
    * @param[in]  sd_token_withdraw_request OAISDTokenWithdrawRequest [required]
    */
    void tokenWithdrawPost(const OAISDTokenWithdrawRequest &sd_token_withdraw_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tokenBurnPostCallback(OAIHttpRequestWorker *worker);
    void tokenGetGetCallback(OAIHttpRequestWorker *worker);
    void tokenMintBulkPostCallback(OAIHttpRequestWorker *worker);
    void tokenMutatePutCallback(OAIHttpRequestWorker *worker);
    void tokenPropsRemoveDeleteCallback(OAIHttpRequestWorker *worker);
    void tokenTransferPostCallback(OAIHttpRequestWorker *worker);
    void tokenWithdrawPostCallback(OAIHttpRequestWorker *worker);

signals:

    void tokenBurnPostSignal(OAIObject summary);
    void tokenGetGetSignal(QList<OAISDTokenGetResponse> summary);
    void tokenMintBulkPostSignal(QList<qint32> summary);
    void tokenMutatePutSignal(OAIObject summary);
    void tokenPropsRemoveDeleteSignal(OAIObject summary);
    void tokenTransferPostSignal(OAIObject summary);
    void tokenWithdrawPostSignal(OAIObject summary);

    void tokenBurnPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void tokenGetGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISDTokenGetResponse> summary);
    void tokenMintBulkPostSignalFull(OAIHttpRequestWorker *worker, QList<qint32> summary);
    void tokenMutatePutSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void tokenPropsRemoveDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void tokenTransferPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void tokenWithdrawPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    void tokenBurnPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenGetGetSignalE(QList<OAISDTokenGetResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenMintBulkPostSignalE(QList<qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenMutatePutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenPropsRemoveDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenTransferPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenWithdrawPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);

    void tokenBurnPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenGetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenMintBulkPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenMutatePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenPropsRemoveDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenTransferPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenWithdrawPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace stardust
} // namespace core
#endif
