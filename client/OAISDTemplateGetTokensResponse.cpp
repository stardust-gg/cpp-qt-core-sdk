/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDTemplateGetTokensResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDTemplateGetTokensResponse::OAISDTemplateGetTokensResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDTemplateGetTokensResponse::OAISDTemplateGetTokensResponse() {
    this->initializeModel();
}

OAISDTemplateGetTokensResponse::~OAISDTemplateGetTokensResponse() {}

void OAISDTemplateGetTokensResponse::initializeModel() {

    m_token_isSet = false;
    m_token_isValid = false;

    m_player_isSet = false;
    m_player_isValid = false;
}

void OAISDTemplateGetTokensResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDTemplateGetTokensResponse::fromJsonObject(QJsonObject json) {

    m_token_isValid = ::stardust::core::fromJsonValue(token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_player_isValid = ::stardust::core::fromJsonValue(player, json[QString("player")]);
    m_player_isSet = !json[QString("player")].isNull() && m_player_isValid;
}

QString OAISDTemplateGetTokensResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDTemplateGetTokensResponse::asJsonObject() const {
    QJsonObject obj;
    if (token.isSet()) {
        obj.insert(QString("token"), ::stardust::core::toJsonValue(token));
    }
    if (player.isSet()) {
        obj.insert(QString("player"), ::stardust::core::toJsonValue(player));
    }
    return obj;
}

OAISDTemplateGetTokensResponse_token OAISDTemplateGetTokensResponse::getToken() const {
    return token;
}
void OAISDTemplateGetTokensResponse::setToken(const OAISDTemplateGetTokensResponse_token &token) {
    this->token = token;
    this->m_token_isSet = true;
}

bool OAISDTemplateGetTokensResponse::is_token_Set() const{
    return m_token_isSet;
}

bool OAISDTemplateGetTokensResponse::is_token_Valid() const{
    return m_token_isValid;
}

OAISDTemplateGetTokensResponse_player OAISDTemplateGetTokensResponse::getPlayer() const {
    return player;
}
void OAISDTemplateGetTokensResponse::setPlayer(const OAISDTemplateGetTokensResponse_player &player) {
    this->player = player;
    this->m_player_isSet = true;
}

bool OAISDTemplateGetTokensResponse::is_player_Set() const{
    return m_player_isSet;
}

bool OAISDTemplateGetTokensResponse::is_player_Valid() const{
    return m_player_isValid;
}

bool OAISDTemplateGetTokensResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (player.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDTemplateGetTokensResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_isValid && m_player_isValid && true;
}

} // namespace stardust
} // namespace core
