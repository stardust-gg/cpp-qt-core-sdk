/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISDOrderGetAllResponse.h
 *
 * 
 */

#ifndef OAISDOrderGetAllResponse_H
#define OAISDOrderGetAllResponse_H

#include <QJsonObject>

#include "OAISDOrderGetAllResponse_tokensRequested_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace stardust {
namespace core {
class OAISDOrderGetAllResponse_tokensRequested_inner;

class OAISDOrderGetAllResponse : public OAIObject {
public:
    OAISDOrderGetAllResponse();
    OAISDOrderGetAllResponse(QString json);
    ~OAISDOrderGetAllResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getOfferedBy() const;
    void setOfferedBy(const QString &offered_by);
    bool is_offered_by_Set() const;
    bool is_offered_by_Valid() const;

    QString getAcceptedBy() const;
    void setAcceptedBy(const QString &accepted_by);
    bool is_accepted_by_Set() const;
    bool is_accepted_by_Valid() const;

    QList<OAISDOrderGetAllResponse_tokensRequested_inner> getTokensRequested() const;
    void setTokensRequested(const QList<OAISDOrderGetAllResponse_tokensRequested_inner> &tokens_requested);
    bool is_tokens_requested_Set() const;
    bool is_tokens_requested_Valid() const;

    QList<OAISDOrderGetAllResponse_tokensRequested_inner> getTokensOffered() const;
    void setTokensOffered(const QList<OAISDOrderGetAllResponse_tokensRequested_inner> &tokens_offered);
    bool is_tokens_offered_Set() const;
    bool is_tokens_offered_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString offered_by;
    bool m_offered_by_isSet;
    bool m_offered_by_isValid;

    QString accepted_by;
    bool m_accepted_by_isSet;
    bool m_accepted_by_isValid;

    QList<OAISDOrderGetAllResponse_tokensRequested_inner> tokens_requested;
    bool m_tokens_requested_isSet;
    bool m_tokens_requested_isValid;

    QList<OAISDOrderGetAllResponse_tokensRequested_inner> tokens_offered;
    bool m_tokens_offered_isSet;
    bool m_tokens_offered_isValid;

    QString status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace stardust
} // namespace core

Q_DECLARE_METATYPE(stardust::core::OAISDOrderGetAllResponse)

#endif // OAISDOrderGetAllResponse_H
