/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDOrderCancelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDOrderCancelRequest::OAISDOrderCancelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDOrderCancelRequest::OAISDOrderCancelRequest() {
    this->initializeModel();
}

OAISDOrderCancelRequest::~OAISDOrderCancelRequest() {}

void OAISDOrderCancelRequest::initializeModel() {

    m_from_player_id_isSet = false;
    m_from_player_id_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;
}

void OAISDOrderCancelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDOrderCancelRequest::fromJsonObject(QJsonObject json) {

    m_from_player_id_isValid = ::stardust::core::fromJsonValue(from_player_id, json[QString("fromPlayerId")]);
    m_from_player_id_isSet = !json[QString("fromPlayerId")].isNull() && m_from_player_id_isValid;

    m_game_id_isValid = ::stardust::core::fromJsonValue(game_id, json[QString("gameId")]);
    m_game_id_isSet = !json[QString("gameId")].isNull() && m_game_id_isValid;

    m_order_id_isValid = ::stardust::core::fromJsonValue(order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;
}

QString OAISDOrderCancelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDOrderCancelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_from_player_id_isSet) {
        obj.insert(QString("fromPlayerId"), ::stardust::core::toJsonValue(from_player_id));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("gameId"), ::stardust::core::toJsonValue(game_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::stardust::core::toJsonValue(order_id));
    }
    return obj;
}

QString OAISDOrderCancelRequest::getFromPlayerId() const {
    return from_player_id;
}
void OAISDOrderCancelRequest::setFromPlayerId(const QString &from_player_id) {
    this->from_player_id = from_player_id;
    this->m_from_player_id_isSet = true;
}

bool OAISDOrderCancelRequest::is_from_player_id_Set() const{
    return m_from_player_id_isSet;
}

bool OAISDOrderCancelRequest::is_from_player_id_Valid() const{
    return m_from_player_id_isValid;
}

qint32 OAISDOrderCancelRequest::getGameId() const {
    return game_id;
}
void OAISDOrderCancelRequest::setGameId(const qint32 &game_id) {
    this->game_id = game_id;
    this->m_game_id_isSet = true;
}

bool OAISDOrderCancelRequest::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAISDOrderCancelRequest::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAISDOrderCancelRequest::getOrderId() const {
    return order_id;
}
void OAISDOrderCancelRequest::setOrderId(const qint32 &order_id) {
    this->order_id = order_id;
    this->m_order_id_isSet = true;
}

bool OAISDOrderCancelRequest::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAISDOrderCancelRequest::is_order_id_Valid() const{
    return m_order_id_isValid;
}

bool OAISDOrderCancelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDOrderCancelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_game_id_isValid && m_order_id_isValid && true;
}

} // namespace stardust
} // namespace core
