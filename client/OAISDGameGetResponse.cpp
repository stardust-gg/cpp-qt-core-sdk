/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-06-15T19:52:41Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDGameGetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDGameGetResponse::OAISDGameGetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDGameGetResponse::OAISDGameGetResponse() {
    this->initializeModel();
}

OAISDGameGetResponse::~OAISDGameGetResponse() {}

void OAISDGameGetResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_news_isSet = false;
    m_news_isValid = false;

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_props_isSet = false;
    m_props_isValid = false;

    m_test_mode_isSet = false;
    m_test_mode_isValid = false;
}

void OAISDGameGetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDGameGetResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::stardust::core::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owner_id_isValid = ::stardust::core::fromJsonValue(owner_id, json[QString("ownerId")]);
    m_owner_id_isSet = !json[QString("ownerId")].isNull() && m_owner_id_isValid;

    m_name_isValid = ::stardust::core::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_desc_isValid = ::stardust::core::fromJsonValue(desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_image_isValid = ::stardust::core::fromJsonValue(image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_bucket_name_isValid = ::stardust::core::fromJsonValue(bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_news_isValid = ::stardust::core::fromJsonValue(news, json[QString("news")]);
    m_news_isSet = !json[QString("news")].isNull() && m_news_isValid;

    m_fees_isValid = ::stardust::core::fromJsonValue(fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_props_isValid = ::stardust::core::fromJsonValue(props, json[QString("props")]);
    m_props_isSet = !json[QString("props")].isNull() && m_props_isValid;

    m_test_mode_isValid = ::stardust::core::fromJsonValue(test_mode, json[QString("testMode")]);
    m_test_mode_isSet = !json[QString("testMode")].isNull() && m_test_mode_isValid;
}

QString OAISDGameGetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDGameGetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::stardust::core::toJsonValue(id));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerId"), ::stardust::core::toJsonValue(owner_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::stardust::core::toJsonValue(name));
    }
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::stardust::core::toJsonValue(desc));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::stardust::core::toJsonValue(image));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::stardust::core::toJsonValue(bucket_name));
    }
    if (m_news_isSet) {
        obj.insert(QString("news"), ::stardust::core::toJsonValue(news));
    }
    if (fees.size() > 0) {
        obj.insert(QString("fees"), ::stardust::core::toJsonValue(fees));
    }
    if (m_props_isSet) {
        obj.insert(QString("props"), ::stardust::core::toJsonValue(props));
    }
    if (m_test_mode_isSet) {
        obj.insert(QString("testMode"), ::stardust::core::toJsonValue(test_mode));
    }
    return obj;
}

qint32 OAISDGameGetResponse::getId() const {
    return id;
}
void OAISDGameGetResponse::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAISDGameGetResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAISDGameGetResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISDGameGetResponse::getOwnerId() const {
    return owner_id;
}
void OAISDGameGetResponse::setOwnerId(const QString &owner_id) {
    this->owner_id = owner_id;
    this->m_owner_id_isSet = true;
}

bool OAISDGameGetResponse::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAISDGameGetResponse::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAISDGameGetResponse::getName() const {
    return name;
}
void OAISDGameGetResponse::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAISDGameGetResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAISDGameGetResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISDGameGetResponse::getDesc() const {
    return desc;
}
void OAISDGameGetResponse::setDesc(const QString &desc) {
    this->desc = desc;
    this->m_desc_isSet = true;
}

bool OAISDGameGetResponse::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAISDGameGetResponse::is_desc_Valid() const{
    return m_desc_isValid;
}

QString OAISDGameGetResponse::getImage() const {
    return image;
}
void OAISDGameGetResponse::setImage(const QString &image) {
    this->image = image;
    this->m_image_isSet = true;
}

bool OAISDGameGetResponse::is_image_Set() const{
    return m_image_isSet;
}

bool OAISDGameGetResponse::is_image_Valid() const{
    return m_image_isValid;
}

QString OAISDGameGetResponse::getBucketName() const {
    return bucket_name;
}
void OAISDGameGetResponse::setBucketName(const QString &bucket_name) {
    this->bucket_name = bucket_name;
    this->m_bucket_name_isSet = true;
}

bool OAISDGameGetResponse::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAISDGameGetResponse::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAISDGameGetResponse::getNews() const {
    return news;
}
void OAISDGameGetResponse::setNews(const QString &news) {
    this->news = news;
    this->m_news_isSet = true;
}

bool OAISDGameGetResponse::is_news_Set() const{
    return m_news_isSet;
}

bool OAISDGameGetResponse::is_news_Valid() const{
    return m_news_isValid;
}

QList<OAISDGameGetResponse_fees_inner> OAISDGameGetResponse::getFees() const {
    return fees;
}
void OAISDGameGetResponse::setFees(const QList<OAISDGameGetResponse_fees_inner> &fees) {
    this->fees = fees;
    this->m_fees_isSet = true;
}

bool OAISDGameGetResponse::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAISDGameGetResponse::is_fees_Valid() const{
    return m_fees_isValid;
}

OAIObject OAISDGameGetResponse::getProps() const {
    return props;
}
void OAISDGameGetResponse::setProps(const OAIObject &props) {
    this->props = props;
    this->m_props_isSet = true;
}

bool OAISDGameGetResponse::is_props_Set() const{
    return m_props_isSet;
}

bool OAISDGameGetResponse::is_props_Valid() const{
    return m_props_isValid;
}

bool OAISDGameGetResponse::isTestMode() const {
    return test_mode;
}
void OAISDGameGetResponse::setTestMode(const bool &test_mode) {
    this->test_mode = test_mode;
    this->m_test_mode_isSet = true;
}

bool OAISDGameGetResponse::is_test_mode_Set() const{
    return m_test_mode_isSet;
}

bool OAISDGameGetResponse::is_test_mode_Valid() const{
    return m_test_mode_isValid;
}

bool OAISDGameGetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_news_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (fees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_props_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDGameGetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_owner_id_isValid && m_name_isValid && m_desc_isValid && m_image_isValid && m_bucket_name_isValid && true;
}

} // namespace stardust
} // namespace core
