/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-07-25T00:59:12Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISDTemplateGetAllResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace stardust {
namespace core {

OAISDTemplateGetAllResponse::OAISDTemplateGetAllResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISDTemplateGetAllResponse::OAISDTemplateGetAllResponse() {
    this->initializeModel();
}

OAISDTemplateGetAllResponse::~OAISDTemplateGetAllResponse() {}

void OAISDTemplateGetAllResponse::initializeModel() {

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m__id_isSet = false;
    m__id_isValid = false;

    m_cap_isSet = false;
    m_cap_isValid = false;

    m_contract_type_isSet = false;
    m_contract_type_isValid = false;

    m_total_supply_isSet = false;
    m_total_supply_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_props_isSet = false;
    m_props_isValid = false;

    m_public_contract_metadata_isSet = false;
    m_public_contract_metadata_isValid = false;

    m_public_token_metadata_isSet = false;
    m_public_token_metadata_isValid = false;

    m_blockchain_contract_address_isSet = false;
    m_blockchain_contract_address_isValid = false;
}

void OAISDTemplateGetAllResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISDTemplateGetAllResponse::fromJsonObject(QJsonObject json) {

    m_game_id_isValid = ::stardust::core::fromJsonValue(game_id, json[QString("gameId")]);
    m_game_id_isSet = !json[QString("gameId")].isNull() && m_game_id_isValid;

    m__id_isValid = ::stardust::core::fromJsonValue(_id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_cap_isValid = ::stardust::core::fromJsonValue(cap, json[QString("cap")]);
    m_cap_isSet = !json[QString("cap")].isNull() && m_cap_isValid;

    m_contract_type_isValid = ::stardust::core::fromJsonValue(contract_type, json[QString("contractType")]);
    m_contract_type_isSet = !json[QString("contractType")].isNull() && m_contract_type_isValid;

    m_total_supply_isValid = ::stardust::core::fromJsonValue(total_supply, json[QString("totalSupply")]);
    m_total_supply_isSet = !json[QString("totalSupply")].isNull() && m_total_supply_isValid;

    m_name_isValid = ::stardust::core::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::stardust::core::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_props_isValid = ::stardust::core::fromJsonValue(props, json[QString("props")]);
    m_props_isSet = !json[QString("props")].isNull() && m_props_isValid;

    m_public_contract_metadata_isValid = ::stardust::core::fromJsonValue(public_contract_metadata, json[QString("publicContractMetadata")]);
    m_public_contract_metadata_isSet = !json[QString("publicContractMetadata")].isNull() && m_public_contract_metadata_isValid;

    m_public_token_metadata_isValid = ::stardust::core::fromJsonValue(public_token_metadata, json[QString("publicTokenMetadata")]);
    m_public_token_metadata_isSet = !json[QString("publicTokenMetadata")].isNull() && m_public_token_metadata_isValid;

    m_blockchain_contract_address_isValid = ::stardust::core::fromJsonValue(blockchain_contract_address, json[QString("blockchain_contract_address")]);
    m_blockchain_contract_address_isSet = !json[QString("blockchain_contract_address")].isNull() && m_blockchain_contract_address_isValid;
}

QString OAISDTemplateGetAllResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISDTemplateGetAllResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_game_id_isSet) {
        obj.insert(QString("gameId"), ::stardust::core::toJsonValue(game_id));
    }
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::stardust::core::toJsonValue(_id));
    }
    if (m_cap_isSet) {
        obj.insert(QString("cap"), ::stardust::core::toJsonValue(cap));
    }
    if (m_contract_type_isSet) {
        obj.insert(QString("contractType"), ::stardust::core::toJsonValue(contract_type));
    }
    if (m_total_supply_isSet) {
        obj.insert(QString("totalSupply"), ::stardust::core::toJsonValue(total_supply));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::stardust::core::toJsonValue(name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::stardust::core::toJsonValue(type));
    }
    if (props.isSet()) {
        obj.insert(QString("props"), ::stardust::core::toJsonValue(props));
    }
    if (m_public_contract_metadata_isSet) {
        obj.insert(QString("publicContractMetadata"), ::stardust::core::toJsonValue(public_contract_metadata));
    }
    if (m_public_token_metadata_isSet) {
        obj.insert(QString("publicTokenMetadata"), ::stardust::core::toJsonValue(public_token_metadata));
    }
    if (m_blockchain_contract_address_isSet) {
        obj.insert(QString("blockchain_contract_address"), ::stardust::core::toJsonValue(blockchain_contract_address));
    }
    return obj;
}

qint32 OAISDTemplateGetAllResponse::getGameId() const {
    return game_id;
}
void OAISDTemplateGetAllResponse::setGameId(const qint32 &game_id) {
    this->game_id = game_id;
    this->m_game_id_isSet = true;
}

bool OAISDTemplateGetAllResponse::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAISDTemplateGetAllResponse::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAISDTemplateGetAllResponse::getId() const {
    return _id;
}
void OAISDTemplateGetAllResponse::setId(const qint32 &_id) {
    this->_id = _id;
    this->m__id_isSet = true;
}

bool OAISDTemplateGetAllResponse::is__id_Set() const{
    return m__id_isSet;
}

bool OAISDTemplateGetAllResponse::is__id_Valid() const{
    return m__id_isValid;
}

QString OAISDTemplateGetAllResponse::getCap() const {
    return cap;
}
void OAISDTemplateGetAllResponse::setCap(const QString &cap) {
    this->cap = cap;
    this->m_cap_isSet = true;
}

bool OAISDTemplateGetAllResponse::is_cap_Set() const{
    return m_cap_isSet;
}

bool OAISDTemplateGetAllResponse::is_cap_Valid() const{
    return m_cap_isValid;
}

QString OAISDTemplateGetAllResponse::getContractType() const {
    return contract_type;
}
void OAISDTemplateGetAllResponse::setContractType(const QString &contract_type) {
    this->contract_type = contract_type;
    this->m_contract_type_isSet = true;
}

bool OAISDTemplateGetAllResponse::is_contract_type_Set() const{
    return m_contract_type_isSet;
}

bool OAISDTemplateGetAllResponse::is_contract_type_Valid() const{
    return m_contract_type_isValid;
}

QString OAISDTemplateGetAllResponse::getTotalSupply() const {
    return total_supply;
}
void OAISDTemplateGetAllResponse::setTotalSupply(const QString &total_supply) {
    this->total_supply = total_supply;
    this->m_total_supply_isSet = true;
}

bool OAISDTemplateGetAllResponse::is_total_supply_Set() const{
    return m_total_supply_isSet;
}

bool OAISDTemplateGetAllResponse::is_total_supply_Valid() const{
    return m_total_supply_isValid;
}

QString OAISDTemplateGetAllResponse::getName() const {
    return name;
}
void OAISDTemplateGetAllResponse::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAISDTemplateGetAllResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAISDTemplateGetAllResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISDTemplateGetAllResponse::getType() const {
    return type;
}
void OAISDTemplateGetAllResponse::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAISDTemplateGetAllResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAISDTemplateGetAllResponse::is_type_Valid() const{
    return m_type_isValid;
}

OAISDTemplateGetAllResponse_props OAISDTemplateGetAllResponse::getProps() const {
    return props;
}
void OAISDTemplateGetAllResponse::setProps(const OAISDTemplateGetAllResponse_props &props) {
    this->props = props;
    this->m_props_isSet = true;
}

bool OAISDTemplateGetAllResponse::is_props_Set() const{
    return m_props_isSet;
}

bool OAISDTemplateGetAllResponse::is_props_Valid() const{
    return m_props_isValid;
}

OAIObject OAISDTemplateGetAllResponse::getPublicContractMetadata() const {
    return public_contract_metadata;
}
void OAISDTemplateGetAllResponse::setPublicContractMetadata(const OAIObject &public_contract_metadata) {
    this->public_contract_metadata = public_contract_metadata;
    this->m_public_contract_metadata_isSet = true;
}

bool OAISDTemplateGetAllResponse::is_public_contract_metadata_Set() const{
    return m_public_contract_metadata_isSet;
}

bool OAISDTemplateGetAllResponse::is_public_contract_metadata_Valid() const{
    return m_public_contract_metadata_isValid;
}

OAIObject OAISDTemplateGetAllResponse::getPublicTokenMetadata() const {
    return public_token_metadata;
}
void OAISDTemplateGetAllResponse::setPublicTokenMetadata(const OAIObject &public_token_metadata) {
    this->public_token_metadata = public_token_metadata;
    this->m_public_token_metadata_isSet = true;
}

bool OAISDTemplateGetAllResponse::is_public_token_metadata_Set() const{
    return m_public_token_metadata_isSet;
}

bool OAISDTemplateGetAllResponse::is_public_token_metadata_Valid() const{
    return m_public_token_metadata_isValid;
}

QString OAISDTemplateGetAllResponse::getBlockchainContractAddress() const {
    return blockchain_contract_address;
}
void OAISDTemplateGetAllResponse::setBlockchainContractAddress(const QString &blockchain_contract_address) {
    this->blockchain_contract_address = blockchain_contract_address;
    this->m_blockchain_contract_address_isSet = true;
}

bool OAISDTemplateGetAllResponse::is_blockchain_contract_address_Set() const{
    return m_blockchain_contract_address_isSet;
}

bool OAISDTemplateGetAllResponse::is_blockchain_contract_address_Valid() const{
    return m_blockchain_contract_address_isValid;
}

bool OAISDTemplateGetAllResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_supply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (props.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_contract_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_token_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blockchain_contract_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISDTemplateGetAllResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_game_id_isValid && m__id_isValid && m_cap_isValid && m_total_supply_isValid && m_name_isValid && m_type_isValid && m_props_isValid && true;
}

} // namespace stardust
} // namespace core
